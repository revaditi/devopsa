1. Create a New Jenkins Job (Freestyle Project)

1. Log into Jenkins:

(http://localhost:8080)).

2. Create a New Job:
    - Click "New Item" on the Jenkins dashboard.
    - Enter Item Name: e.g., `HelloMaven-CI`.
    - Select "Freestyle project" and click "OK".

2. Configure Source Code Management (SCM)

Scroll to the "Source Code Management" Section:

- Select "Git".
- Repository URL: Enter your repository URL: `https://github.com/devops-ds/your-maven-project.git`
- Credentials: If the repository is private, click "Add" and provide the necessary credentials. (Not needed for the given public repository).
- Branch Specifier: (e.g., `*/main` or `*/master`). Use `*/main` if you are using above link.


3. Add Build Steps

1. Scroll Down to the "Build" Section.
2. Add the Maven Build Step:
Click "Add build step" and select **"Execute shell".**
    
    Configure the Shell Command:
    
    To find the full path to your `mvn` executable on open terminal in Ubuntu and run:
    
    which mvn
   
    /usr/bin/mvn clean package
   
3. Add the Ansible Deployment Step:
Click "Add build step" again and select "Execute shell" (or "Execute Windows batch command" on Windows).
    
    Configure the Shell Command:
    

    ansible-playbook -i hosts.ini deploy.yml
    
    
 4. Archiving the Artifact

After the Maven build completes, you need to archive the generated artifact so that it can be used later by the deployment process.

1. Scroll Down to the "Post-build Actions" Section:

- Click "Add post-build action" and select "Archive the artifacts".

2. Configure Artifact Archiving:

- Files to Archive: Type: 
  
  target/*.jar
  
- This pattern tells Jenkins to archive any JAR file found in the `target` directory.


5. Save the Jenkins Job:

- Click "Save" at the bottom of the configuration page.


7. Testing the Complete Pipeline

 1. Trigger a Build in Jenkins:

- Navigate to your Jenkins job (`HelloMaven-CI`) and click "Build Now".
- Monitor the build history. Once the build completes, click the build number (e.g., #1) and check the Console Output.
- Look for messages indicating that:
    - The Maven build ran successfully.
    - The shell command executed the Ansible playbook.
    - The artifact was archived.

 2. Verify Deployment:

- Open file explore and verify that the artifact has been copied to the destination directory (e.g., `/var/lib/jenkins/deployment/`).
    
    
- Check in terminal, run the below comand in terminal:
    
   
    ls -l /var/lib/jenkins/deployment/
  
    
- The output should list the deployed JAR file.
