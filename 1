# Experiment 1 - Installation of Maven and Gradle

# üõ†Ô∏è Prerequisites

### 1. Install Java 17 (or higher)

```bash
sudo apt update
sudo apt install openjdk-17-jdk -y
```

### 2. Verify Java Installation

```bash
java --version
```

### 3. Set Java 17 (or higher) as Default if it‚Äôs not already set

```bash
sudo update-alternatives --config java
```

*Follow the prompts to select Java 17 (or higher).*

![image.png](attachment:6192e77a-0a0c-43fd-a4ee-d46c6f79a1cd:image.png)

---

# üßπ Remove Existing Gradle (Only if Present)

### 1. Check if Gradle is Installed

```bash
gradle -v
```

**If gradle is installed then follow the following steps to remove the exsisting gradle -**

### 2. Remove Gradle Installed via APT

```bash
sudo apt remove gradle -y
```

### 3. Remove Gradle Installed via SDKMAN

First check if SDKMAN is installed:

```bash
ls ~/.sdkman
```

If it exists, then uninstall Gradle using:

```bash
sdk uninstall gradle <version?> --force

#Replace <version> with the installed version for example if version was 8.13 the line would be - 
#sdk uninstall gradle 8.13 ‚Äîforce
```

---

## üì¶ Install Maven

### 1. Install Maven

```bash
sudo apt install maven -y
```

### 2. Verify Maven Installation

```bash
mvn -version
```
# üì¶ Install Gradle 8.14

### 1. Download and Extract Gradle

```bash
wget https://services.gradle.org/distributions/gradle-8.14-bin.zip -P /tmp
sudo unzip -d /opt/gradle /tmp/gradle-8.14-bin.zip
```

### 2. Set Environment Variables Permanently (for Bash)

Modify bash command file by running the following command:

```bash
gedit ~/.bashrc
```

**At the end of the file, add the following lines:**
export GRADLE_HOME=/opt/gradle/gradle-8.14
export PATH=${GRADLE_HOME}/bin:${PATH}
Save the file.

Then to apply the changes run  the following in terminal:

```bash
source ~/.bashrc
```

### 3. Verify Gradle Installation
gradle -v



# Experiment 2 - Working with Maven

## 1. Creating a Maven Project

- **Step 1: Open Terminal**
- **Step 2: Generate Project**
    
    If there is already a folder named MyMavenApp then change the -DrartifactId value to some other name or delete the MyMavenApp folder.
    
    ```bash
    mvn archetype:generate -DgroupId=com.example -DartifactId=MyMavenApp -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false
    ```
    
- **Step 3: Navigate to Project Directory**
    
    ```bash
    cd MyMavenApp
    ```
    

---

## 2. Maven Project Layout

To visualize the structure of the generated Maven project, you can use the `tree` command.

If `tree` is not already installed on your system, run the following command in your terminal:

```bash
sudo snap install tree
```

Then, navigate to your project directory (e.g., `cd MyMavenApp`) and run:

```bash
tree
```

![image.png](attachment:82bb0d0d-5209-4a6c-8c93-3610b47a34d1:image.png)

Key files and directories:

- `pom.xml`
- `src/main/java/com/example/App.java`
- `src/test/java/com/example/AppTest.java`

---

## 3. Understanding the POM File (`pom.xml`)

### Basic Structure:

- **Step 1: Open the pom.xml file**

```bash
gedit pom.xml
```

- **Step 2: Remove the existing pom.xml file and paste the following**

```xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

  <modelVersion>4.0.0</modelVersion>
  <groupId>com.example</groupId>
  <artifactId>MyMavenApp</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>jar</packaging>

  <properties>
    <!-- Java version -->
    <maven.compiler.source>17</maven.compiler.source>
    <maven.compiler.target>17</maven.compiler.target>

    <!-- JUnit and Surefire versions -->
    <junit.jupiter.version>5.10.1</junit.jupiter.version>
    <surefire.plugin.version>3.0.0-M7</surefire.plugin.version>
  </properties>

  <dependencies>
    <!-- JUnit 5 API for writing tests -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <version>${junit.jupiter.version}</version>
      <scope>test</scope>
    </dependency>

    <!-- JUnit 5 Engine for running tests -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <version>${junit.jupiter.version}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <!-- Compiler plugin for Java 17 -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.8.1</version>
        <configuration>
          <source>${maven.compiler.source}</source>
          <target>${maven.compiler.target}</target>
        </configuration>
      </plugin>

      <!-- Surefire plugin to run JUnit 5 tests -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>${surefire.plugin.version}</version>
        <configuration>
          <argLine>--add-opens java.base/java.lang=ALL-UNNAMED</argLine>
        </configuration>
      </plugin>
    </plugins>
  </build>

</project>
```

---

## 4. Updating the Default Java Files

The Maven archetype generated default main and test Java files. We will now replace their content with the following code.

- **Step 1: To open and edit the main application file (`App.java`), use the following command:**

```bash
gedit src/main/java/com/example/App.java
```

Replace the existing content with this code:

```java
package com.example;

public class App {
    public String getMessage() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        System.out.println(new App().getMessage());
    }
}
```

- **Step 2: To open and edit the test file (`AppTest.java`), use the following command:**

```bash
gedit src/test/java/com/example/AppTest.java
```

Replace the existing content with this code:

```java
package com.example;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

class AppTest {

    @Test
    void testGetMessage() {
        App app = new App();
        assertEquals("Hello World!", app.getMessage(), "Message should be 'Hello World!'");
    }
}
```

---

## 5. Compiling the Project

Now that we've updated the source code, we need to compile the project. This will also run the tests defined in `src/test/java`. The `mvn clean install` command cleans the target directory, compiles the source code, runs the tests, and packages the project into a JAR file.

```bash
mvn clean install
```

You should see output indicating that the build was successful and the tests passed.

![image.png](attachment:8b76ed78-1f1d-4148-9f6a-934694d77f43:image.png)

---

## 6. Running the Application

You can run the main class of your application directly using the Maven Exec Plugin.

```bash
java -cp target/classes com.example.App
```

- `java`: The command to execute a Java class file.
- `cp target/classes`: This sets the classpath. It tells the Java runtime where to look for compiled `.class` files. In a standard Maven project, the compiled main classes are placed in the `target/classes` directory.
- `com.example.App`: The fully qualified name of the class containing the `main` method you want to execute.
