# Experiment 5 - Installing Jenkins

## 1. Update Your System


sudo apt update
sudo apt upgrade -y




## 2. Add the Jenkins Repository Key



sudo wget -O /etc/apt/keyrings/jenkins-keyring.asc \
  https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key




## 3. Add the Jenkins Repository to Your Sources List



echo "deb [signed-by=/etc/apt/keyrings/jenkins-keyring.asc]" \
  https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
  /etc/apt/sources.list.d/jenkins.list > /dev/null




## 4. Update Your Package List and Install Jenkins




sudo apt update
sudo apt install jenkins -y




## 5. Start and Enable the Jenkins Service



sudo systemctl start jenkins
sudo systemctl enable jenkins



sudo systemctl status jenkins



## 6. Access Jenkins and Complete Initial Setup

    
(http://localhost:8080)


 //open a new terminal and add the below comment:
 
   
sudo cat /var/lib/jenkins/secrets/initialAdminPassword
    
    
3. Copy the displayed password and paste it into the "Administrator password" field in your browser. Click "Continue".
4. On the next screen, click "Install suggested plugins" to install a recommended set of plugins.
5. After the plugins are installed, you will be asked to create an administrator user. Fill in the required details and click "Save and Finish".
6. You should now see the Jenkins dashboard, ready for use.



## 1. Prepare Your Project on GitHub


- Maven Project: (https://github.com/devops-ds/your-maven-project.git)
- Gradle Project: (https://github.com/devops-ds/your-gradle-project.git)


Make sure your project has a build file (`pom.xml` for Maven or `build.gradle`/`build.gradle.kts` for Gradle) that can compile your code and generate JUnit test reports (typically XML files).



## 2. Log in to Jenkins

Open your web browser and go to your Jenkins instance (e.g., `localhost:8080`). Log in with the administrator credentials you created during the initial setup.

//if you are asked to do freestyle then do until line number 156 (step 3 to step 9):

## 3. Create a New Jenkins Job (Freestyle Project)

1. On the Jenkins dashboard, click "New Item" (or "Create a job" if it's a fresh installation).
2. Enter an item name (e.g., `Maven-GitHub-Freestyle` or `Gradle-GitHub-Freestyle`).
3. Select "Freestyle project".
4. Click "OK".



## 4. Configure Source Code Management (SCM) for Freestyle

1. Scroll down to the "Source Code Management" section.
2. Select "Git".
3. In the "Repository URL" field, enter the URL for your chosen GitHub repository (either one of the examples provided or your own).
    - For Maven: `https://github.com/devops-ds/your-maven-project.git`
    - For Gradle: `https://github.com/devops-ds/your-gradle-project.git`
4. If you are using your **own private repository**, you will need to add credentials. Click "Add" next to "Credentials" and provide your GitHub username and password or a personal access token. If using the provided public repositories, no credentials are needed.
5. Under "Branches to build", ensure `*/main` is specified. If your repository uses a different default branch (like `*/master`), adjust this accordingly. For the provided public repositories, `*/main` is correct.


## 5. Configure the Build Step for Freestyle

- **If you are building a Maven Project:**
    1. Scroll down to the "Build" section.
    2. Click "Add build step".
    3. Select "Execute shell" (or "Execute Windows batch command" on Windows).
    4. In the "Command" area, enter the full path to your Maven executable followed by the goals you want to run (e.g., `clean install`).
        
        To find the full path to your `mvn` executable on open terminal in Ubuntu and run:
        which mvn
        
        The output will give you the full path (e.g., `/usr/bin/mvn` or `/opt/maven/bin/mvn`). Use this path in the command below.
        
        /usr/bin/mvn clean install
      

## 6. Configure Post-Build Actions for Freestyle

- Scroll down to the "Post-build Actions" section.
- Click "Add post-build action".
- Select **"Publish JUnit test result report"**.
    - **Test report XMLs:** Enter the path to the test report XML files generated by your build tool.
        - For Maven Surefire/Failsafe: `**/target/surefire-reports/*.xml`


## 7. Save the Freestyle Job Configuration

Scroll to the bottom of the page and click "Save".


## 8. Run the Freestyle Jenkins Job

1. You will be redirected to the job's dashboard page.
2. On the left-hand menu, click "Build Now".

Jenkins will now clone your repository, execute the build command, and then process the test report XML files.


## 9. Monitor the Freestyle Build and View Results

1. Under "Build History" on the left, you will see a new build appear with a progress bar.
2. Click on the build number once it starts.
3. Click "Console Output" on the left to view the live build logs.
4. After the build completes, you should see a "Test Result" link on the build's page if test reports were found and published. Click this link to see a summary of your test results.




//for pipeline:
## 10. Create a New Jenkins Job (Pipeline)

1. On the Jenkins dashboard, click "New Item".
2. Enter an item name (e.g., `Maven-GitHub-Pipeline` or `Gradle-GitHub-Pipeline`).
3. Select "Pipeline".
4. Click "OK".


## 11. Configure the Pipeline Script

1. Scroll down to the "Pipeline" section.
2. Under "Definition", select **"Pipeline script"**. This allows you to write or paste the Pipeline script directly into the Jenkins job configuration.


## 12. Example Pipeline Scripts to Paste Directly
    
    
    pipeline {
        agent any // Or specify a specific agent label
    
        stages {
            stage('Checkout') {
                steps {
                    // Checkout code from your GitHub repository
                    git url: 'https://github.com/devops-ds/your-maven-project.git', branch: 'main' // Replace with your repo URL if different, adjust branch name if needed
                    // If your repository is private, you'll need to add credentials here, e.g.:
                    // git url: 'https://github.com/devops-ds/your-maven-project.git', branch: 'main', credentialsId: 'your-credential-id'
                }
            }
    
            stage('Build') {
                steps {
                    // Execute Maven build using the 'mvn' command with the full path
                    // To find the full path to your 'mvn' executable on Linux/macOS, open your terminal and run:
                    // which mvn
                    sh '/usr/bin/mvn clean package' // Replace with actual path
                }
            }
    
            stage('Test') {
                steps {
                    // Optionally, separate test execution if needed
                    // This step is often not strictly necessary if 'mvn clean package' already runs tests
                    // sh '/path/to/your/maven/bin/mvn test' // Replace with actual path
                    echo 'Tests are typically run during the Build stage with Maven.'
                }
            }
        }
        post {
            always {
                // Archive test reports
                junit '**/target/surefire-reports/*.xml'
            }
            success {
                echo 'Build and tests succeeded!'
            }
            failure {
                echo 'Build or tests failed.'
            }
            // Add other post conditions like 'unstable', 'changed' as needed
        }
    }

        

## 13. Save the Pipeline Job Configuration

Scroll to the bottom of the page and click "Save".


## 14. Run the Pipeline Jenkins Job

1. You will be redirected to the job's dashboard page.
2. On the left-hand menu, click "Build Now".

Jenkins will now execute the stages defined in the Pipeline script you pasted.

---

## 15. Monitor the Pipeline Build and View Results

1. Under "Build History" on the left, you will see a new build appear.
2. Click on the build number.
3. You will see a visual representation of the pipeline stages. Click on a stage to see its details.
4. Click "Console Output" on the left to view the logs for the entire pipeline run.
5. Similar to the Freestyle job, if test reports are published, you will see a "Test Result" link on the build's page.
