mvn archetype:generate -DgroupId=com.example -DartifactId=HelloMaven -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false

cd HelloMaven

tree

gedit pom.xml






<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

  <modelVersion>4.0.0</modelVersion>
  <groupId>com.example</groupId>
  <artifactId>MyMavenApp</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>jar</packaging>

  <properties>
    <!-- Java version -->
    <maven.compiler.source>17</maven.compiler.source>
    <maven.compiler.target>17</maven.compiler.target>

    <!-- JUnit and Surefire versions -->
    <junit.jupiter.version>5.10.1</junit.jupiter.version>
    <surefire.plugin.version>3.0.0-M7</surefire.plugin.version>
  </properties>

  <dependencies>
    <!-- JUnit 5 API for writing tests -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <version>${junit.jupiter.version}</version>
      <scope>test</scope>
    </dependency>

    <!-- JUnit 5 Engine for running tests -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <version>${junit.jupiter.version}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <!-- Compiler plugin for Java 17 -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.8.1</version>
        <configuration>
          <source>${maven.compiler.source}</source>
          <target>${maven.compiler.target}</target>
        </configuration>
      </plugin>

      <!-- Surefire plugin to run JUnit 5 tests -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>${surefire.plugin.version}</version>
        <configuration>
          <argLine>--add-opens java.base/java.lang=ALL-UNNAMED</argLine>
        </configuration>
      </plugin>
    </plugins>
  </build>

</project>




gedit src/main/java/com/example/App.java




package com.example;

public class App {
    public String getMessage() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        System.out.println(new App().getMessage());
    }
}





gedit src/test/java/com/example/AppTest.java






package com.example;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

class AppTest {

    @Test
    void testGetMessage() {
        App app = new App();
        assertEquals("Hello World!", app.getMessage(), "Message should be 'Hello World!'");
    }
}





mvn clean install

mvn test


mvn compile


mvn package


java -cp target/classes com.example.App

gradle init

tree

gedit build.gradle





/*
 * This file was generated by the Gradle 'init' task.
 * Modified for Experiment 4 to enable 'gradle run' for an application.
 */

plugins {
    // Use the application plugin to add support for building and running a Java application
    id 'application'
    id 'java-library' 
    id 'maven-publish' 
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

dependencies {
    // Use JUnit 4 for testing.
    testImplementation libs.junit.junit

    // Add any other dependencies from your pom.xml here if needed
    // Example: implementation 'com.otherlibrary:other-library:1.0'
}

group = 'com.example'
version = '1.0-SNAPSHOT'
description = 'HelloMaven'
java.sourceCompatibility = JavaVersion.VERSION_1_8 // Or a higher version if needed

// Define the main class for the application.
// This is required by the 'application' plugin to run the application.
application {
    mainClass = 'com.example.App' // Make sure this matches the package and class name of your App.java
}

// The publishing block is for publishing the library - not needed for 'gradle run'
// Keep or remove based on your project's full requirements.
publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

// You can add other tasks or configurations here as needed






gradle build

gradle run

gradle run

